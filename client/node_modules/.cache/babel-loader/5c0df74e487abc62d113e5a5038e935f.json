{"ast":null,"code":"import { all, put, takeLatest, call } from \"redux-saga/effects\";\nimport { getCurrentUser, firestore } from \"../../firebase/firebase.utils\";\nimport AdminActionTypes from \"./admin.types\";\nimport { fetchOrdersFromFirestoreSuccess } from \"./admin.actions\";\nexport function* fetchOrdersFromFirestoreAsync() {\n  try {\n    const userRef = yield firestore.collection(`admin/customers/orders`);\n    const snapshot = yield userRef.get();\n    const docs = yield snapshot.docs;\n    yield docs.map(doc => {\n      const data = doc.data();\n      const unixTime = new Date(data.token.created * 1000);\n      const time = unixTime.toLocaleString();\n\n      const dataArray = () => ({\n        id: data.token.id,\n        email: data.token.email,\n        itemsPurchased: data.purchasedItems,\n        time: time,\n        addresses: {\n          city: data.token.card.address_city,\n          country: data.token.card.address_country,\n          address_line1: data.token.card.address_line1,\n          address_line1_check: data.token.address_line1_check,\n          address_line2: data.token.card.address_line2,\n          state: data.token.card.address_state,\n          zip: data.token.card.address_zip,\n          zip_check: data.token.card.address_zip_check,\n          country: data.token.card.country\n        },\n        card: {\n          brand: data.token.card.brand,\n          funding: data.token.card.funding\n        }\n      });\n\n      put(fetchOrdersFromFirestoreSuccess(dataArray));\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onFetchOrdersFromFirestoreStart() {\n  yield takeLatest(AdminActionTypes.FETCH_ORDERS_FROM_FIRESTORE_START, fetchOrdersFromFirestoreAsync);\n}\nexport function* adminSagas() {\n  yield all([call(onFetchOrdersFromFirestoreStart)]);\n}","map":{"version":3,"sources":["/Users/michalwanto/Desktop/Testing-Trial/client/src/redux/admin/admin.sagas.js"],"names":["all","put","takeLatest","call","getCurrentUser","firestore","AdminActionTypes","fetchOrdersFromFirestoreSuccess","fetchOrdersFromFirestoreAsync","userRef","collection","snapshot","get","docs","map","doc","data","unixTime","Date","token","created","time","toLocaleString","dataArray","id","email","itemsPurchased","purchasedItems","addresses","city","card","address_city","country","address_country","address_line1","address_line1_check","address_line2","state","address_state","zip","address_zip","zip_check","address_zip_check","brand","funding","error","console","log","onFetchOrdersFromFirestoreStart","FETCH_ORDERS_FROM_FIRESTORE_START","adminSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,+BAA1C;AAEA,OAAOC,gBAAP,MAA6B,eAA7B;AACA,SAASC,+BAAT,QAAgD,iBAAhD;AAEA,OAAO,UAAUC,6BAAV,GAA0C;AAC/C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMJ,SAAS,CAACK,UAAV,CAAsB,wBAAtB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACG,GAAR,EAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAA5B;AACA,UAAMA,IAAI,CAACC,GAAL,CAAUC,GAAD,IAAS;AACtB,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAb;AACA,YAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASF,IAAI,CAACG,KAAL,CAAWC,OAAX,GAAqB,IAA9B,CAAjB;AACA,YAAMC,IAAI,GAAGJ,QAAQ,CAACK,cAAT,EAAb;;AACA,YAAMC,SAAS,GAAG,OAAO;AACvBC,QAAAA,EAAE,EAAER,IAAI,CAACG,KAAL,CAAWK,EADQ;AAEvBC,QAAAA,KAAK,EAAET,IAAI,CAACG,KAAL,CAAWM,KAFK;AAGvBC,QAAAA,cAAc,EAAEV,IAAI,CAACW,cAHE;AAIvBN,QAAAA,IAAI,EAAEA,IAJiB;AAKvBO,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAEb,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBC,YADb;AAETC,UAAAA,OAAO,EAAEhB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBG,eAFhB;AAGTC,UAAAA,aAAa,EAAElB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBI,aAHtB;AAITC,UAAAA,mBAAmB,EAAEnB,IAAI,CAACG,KAAL,CAAWgB,mBAJvB;AAKTC,UAAAA,aAAa,EAAEpB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBM,aALtB;AAMTC,UAAAA,KAAK,EAAErB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBQ,aANd;AAOTC,UAAAA,GAAG,EAAEvB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBU,WAPZ;AAQTC,UAAAA,SAAS,EAAEzB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBY,iBARlB;AASTV,UAAAA,OAAO,EAAEhB,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBE;AAThB,SALY;AAgBvBF,QAAAA,IAAI,EAAE;AACJa,UAAAA,KAAK,EAAE3B,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBa,KADnB;AAEJC,UAAAA,OAAO,EAAE5B,IAAI,CAACG,KAAL,CAAWW,IAAX,CAAgBc;AAFrB;AAhBiB,OAAP,CAAlB;;AAqBA3C,MAAAA,GAAG,CAACM,+BAA+B,CAACgB,SAAD,CAAhC,CAAH;AACD,KA1BK,CAAN;AA2BD,GA/BD,CA+BE,OAAOsB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AAED,OAAO,UAAUG,+BAAV,GAA4C;AACjD,QAAM9C,UAAU,CACdI,gBAAgB,CAAC2C,iCADH,EAEdzC,6BAFc,CAAhB;AAID;AAED,OAAO,UAAU0C,UAAV,GAAuB;AAC5B,QAAMlD,GAAG,CAAC,CAACG,IAAI,CAAC6C,+BAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, put, takeLatest, call } from \"redux-saga/effects\";\n\nimport { getCurrentUser, firestore } from \"../../firebase/firebase.utils\";\n\nimport AdminActionTypes from \"./admin.types\";\nimport { fetchOrdersFromFirestoreSuccess } from \"./admin.actions\";\n\nexport function* fetchOrdersFromFirestoreAsync() {\n  try {\n    const userRef = yield firestore.collection(`admin/customers/orders`);\n    const snapshot = yield userRef.get();\n    const docs = yield snapshot.docs;\n    yield docs.map((doc) => {\n      const data = doc.data();\n      const unixTime = new Date(data.token.created * 1000);\n      const time = unixTime.toLocaleString();\n      const dataArray = () => ({\n        id: data.token.id,\n        email: data.token.email,\n        itemsPurchased: data.purchasedItems,\n        time: time,\n        addresses: {\n          city: data.token.card.address_city,\n          country: data.token.card.address_country,\n          address_line1: data.token.card.address_line1,\n          address_line1_check: data.token.address_line1_check,\n          address_line2: data.token.card.address_line2,\n          state: data.token.card.address_state,\n          zip: data.token.card.address_zip,\n          zip_check: data.token.card.address_zip_check,\n          country: data.token.card.country,\n        },\n        card: {\n          brand: data.token.card.brand,\n          funding: data.token.card.funding,\n        },\n      });\n      put(fetchOrdersFromFirestoreSuccess(dataArray));\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* onFetchOrdersFromFirestoreStart() {\n  yield takeLatest(\n    AdminActionTypes.FETCH_ORDERS_FROM_FIRESTORE_START,\n    fetchOrdersFromFirestoreAsync\n  );\n}\n\nexport function* adminSagas() {\n  yield all([call(onFetchOrdersFromFirestoreStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}