{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyBvZ61AUwIC6D88qe-2OAUmFVXp_B89TyM\",\n  authDomain: \"lesson-26.firebaseapp.com\",\n  databaseURL: \"https://lesson-26.firebaseio.com\",\n  projectId: \"lesson-26\",\n  storageBucket: \"lesson-26.appspot.com\",\n  messagingSenderId: \"644912221434\",\n  appId: \"1:644912221434:web:b106b7926f4d597d924d43\",\n  measurementId: \"G-1JYRY7CM73\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const docRef = collectionRef.doc();\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      items,\n      title\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const convertTokenDataToDataArray = async docs => {\n  await docs.map(doc => {\n    const data = doc.data();\n    const unixTime = new Date(data.token.created * 1000);\n    const time = unixTime.toLocaleString();\n\n    const dataArray = () => ({\n      id: data.token.id,\n      email: data.token.email,\n      itemsPurchased: data.purchasedItems,\n      time: time,\n      addresses: {\n        city: data.token.card.address_city,\n        country: data.token.card.address_country,\n        address_line1: data.token.card.address_line1,\n        address_line1_check: data.token.address_line1_check,\n        address_line2: data.token.card.address_line2,\n        state: data.token.card.address_state,\n        zip: data.token.card.address_zip,\n        zip_check: data.token.card.address_zip_check,\n        country: data.token.card.country\n      },\n      card: {\n        brand: data.token.card.brand,\n        funding: data.token.card.funding\n      }\n    });\n\n    return dataArray();\n  });\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/michalwanto/Desktop/Testing-Trial/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","docRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","items","title","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","convertTokenDataToDataArray","unixTime","token","created","time","toLocaleString","dataArray","itemsPurchased","purchasedItems","addresses","city","card","address_city","country","address_country","address_line1","address_line1_check","address_line2","state","address_state","zip","address_zip","zip_check","address_zip_check","brand","funding","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyBvZ61AUwIC6D88qe-2OAUmFVXp_B89TyM\",\n  authDomain: \"lesson-26.firebaseapp.com\",\n  databaseURL: \"https://lesson-26.firebaseio.com\",\n  projectId: \"lesson-26\",\n  storageBucket: \"lesson-26.appspot.com\",\n  messagingSenderId: \"644912221434\",\n  appId: \"1:644912221434:web:b106b7926f4d597d924d43\",\n  measurementId: \"G-1JYRY7CM73\",\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const docRef = collectionRef.doc();\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { items, title } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const convertTokenDataToDataArray = async (docs) => {\n  await docs.map((doc) => {\n    const data = doc.data();\n    const unixTime = new Date(data.token.created * 1000);\n    const time = unixTime.toLocaleString();\n    const dataArray = () => ({\n      id: data.token.id,\n      email: data.token.email,\n      itemsPurchased: data.purchasedItems,\n      time: time,\n      addresses: {\n        city: data.token.card.address_city,\n        country: data.token.card.address_country,\n        address_line1: data.token.card.address_line1,\n        address_line1_check: data.token.address_line1_check,\n        address_line2: data.token.card.address_line2,\n        state: data.token.card.address_state,\n        zip: data.token.card.address_zip,\n        zip_check: data.token.card.address_zip_check,\n        country: data.token.card.country,\n      },\n      card: {\n        brand: data.token.card.brand,\n        funding: data.token.card.funding,\n      },\n    });\n    return dataArray();\n  });\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}