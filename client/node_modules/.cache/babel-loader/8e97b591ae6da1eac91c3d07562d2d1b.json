{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDfn1mXew6yKQvoygbpMn6WvVEdCqjCQHY\",\n  authDomain: \"petiverse-f7288.firebaseapp.com\",\n  databaseURL: \"https://petiverse-f7288.firebaseio.com\",\n  projectId: \"petiverse-f7288\",\n  storageBucket: \"petiverse-f7288.appspot.com\",\n  messagingSenderId: \"229844084150\",\n  appId: \"1:229844084150:web:771624643eda3d66d1cd17\",\n  measurementId: \"G-J3QTND7BYY\"\n};\nfirebase.initializeApp(config); // export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n//   const userRef = firestore.doc(`users/${userAuth.uid}`);\n//   const snapShot = await userRef.get();\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await userRef.set({\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   }\n//   return userRef;\n// };\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const docRef = collectionRef.doc();\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      items,\n      title\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const convertTokenDataToDataArray = data => {\n  const unixTime = new Date(data.token.created * 1000);\n  const time = unixTime.toLocaleString();\n\n  const dataArray = () => ({\n    id: data.token.id,\n    email: data.token.email,\n    itemsPurchased: data.purchasedItems,\n    time: time,\n    addresses: {\n      city: data.token.card.address_city,\n      country: data.token.card.address_country,\n      address_line1: data.token.card.address_line1,\n      address_line1_check: data.token.address_line1_check,\n      address_line2: data.token.card.address_line2,\n      state: data.token.card.address_state,\n      zip: data.token.card.address_zip,\n      zip_check: data.token.card.address_zip_check,\n      country: data.token.card.country\n    },\n    card: {\n      brand: data.token.card.brand,\n      funding: data.token.card.funding\n    }\n  });\n\n  return dataArray();\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/michalwanto/Desktop/Petiverse/Petiverse-Website1/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","firestore","collection","batch","forEach","obj","docRef","doc","set","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","items","title","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","convertTokenDataToDataArray","unixTime","Date","token","created","time","toLocaleString","dataArray","email","itemsPurchased","purchasedItems","addresses","city","card","address_city","country","address_country","address_line1","address_line1_check","address_line2","state","address_state","zip","address_zip","zip_check","address_zip_check","brand","funding","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyDfn1mXew6yKQvoygbpMn6WvVEdCqjCQHY\",\n  authDomain: \"petiverse-f7288.firebaseapp.com\",\n  databaseURL: \"https://petiverse-f7288.firebaseio.com\",\n  projectId: \"petiverse-f7288\",\n  storageBucket: \"petiverse-f7288.appspot.com\",\n  messagingSenderId: \"229844084150\",\n  appId: \"1:229844084150:web:771624643eda3d66d1cd17\",\n  measurementId: \"G-J3QTND7BYY\",\n};\n\nfirebase.initializeApp(config);\n\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n\n//   const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n//   const snapShot = await userRef.get();\n\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await userRef.set({\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData,\n//       });\n//     } catch (error) {\n//       console.log(\"error creating user\", error.message);\n//     }\n//   }\n\n//   return userRef;\n// };\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const docRef = collectionRef.doc();\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { items, title } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const convertTokenDataToDataArray = (data) => {\n  const unixTime = new Date(data.token.created * 1000);\n  const time = unixTime.toLocaleString();\n  const dataArray = () => ({\n    id: data.token.id,\n    email: data.token.email,\n    itemsPurchased: data.purchasedItems,\n    time: time,\n    addresses: {\n      city: data.token.card.address_city,\n      country: data.token.card.address_country,\n      address_line1: data.token.card.address_line1,\n      address_line1_check: data.token.address_line1_check,\n      address_line2: data.token.card.address_line2,\n      state: data.token.card.address_state,\n      zip: data.token.card.address_zip,\n      zip_check: data.token.card.address_zip_check,\n      country: data.token.card.country,\n    },\n    card: {\n      brand: data.token.card.brand,\n      funding: data.token.card.funding,\n    },\n  });\n\n  return dataArray();\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}